{"ast":null,"code":"var _jsxFileName = \"F:\\\\CTS HACKATHON\\\\pubmed-semantic-search\\\\frontend\\\\src\\\\components\\\\KnowledgeGraph.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useCallback, useEffect } from 'react';\nimport ForceGraph2D from 'react-force-graph-2d';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst KnowledgeGraph = ({\n  graphData\n}) => {\n  _s();\n  const fgRef = useRef();\n\n  // --- NEW: Auto-center the graph on data load ---\n  useEffect(() => {\n    // This will trigger whenever new graph data is received\n    if (fgRef.current && graphData.nodes.length > 0) {\n      // Zoom to fit all nodes in the view, with 100 pixels of padding\n      fgRef.current.zoomToFit(400, 100);\n    }\n  }, [graphData]); // Dependency array ensures this runs when graphData changes\n\n  // --- UPDATED: Custom node rendering for HIGH CONTRAST labels ---\n  const handleNodeCanvasObject = (node, ctx, globalScale) => {\n    const label = node.label;\n    const fontSize = 12 / globalScale; // Make font size responsive to zoom\n    ctx.font = `bold ${fontSize}px Sans-Serif`;\n\n    // 1. Draw a semi-transparent background for the text\n    const textWidth = ctx.measureText(label).width;\n    const bgDimensions = [textWidth, fontSize].map(n => n + fontSize * 0.4); // bg padding\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.8)'; // White, semi-transparent background\n    ctx.fillRect(node.x - bgDimensions[0] / 2, node.y - bgDimensions[1] / 2, ...bgDimensions);\n\n    // 2. Draw the node label text on top\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillStyle = '#1f2937'; // Dark text for high contrast on the white background\n    ctx.fillText(label, node.x, node.y);\n  };\n  const handleNodeClick = useCallback(node => {\n    // Aim at the node from outside to zoom in on it\n    const distance = 40;\n    const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\n    if (fgRef.current) {\n      fgRef.current.cameraPosition({\n        x: node.x * distRatio,\n        y: node.y * distRatio,\n        z: node.z * distRatio\n      }, node, 1000 // A quicker 1-second transition\n      );\n    }\n  }, [fgRef]);\n  if (!graphData || !graphData.nodes || graphData.nodes.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info-message\",\n      children: \"No graph data could be generated for this query.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-container\",\n    children: /*#__PURE__*/_jsxDEV(ForceGraph2D, {\n      ref: fgRef,\n      graphData: graphData\n\n      // --- Use the new custom rendering function ---\n      ,\n      nodeCanvasObject: handleNodeCanvasObject,\n      nodeAutoColorBy: \"group\" // Keep color coding by entity type\n      ,\n      linkDirectionalArrowLength: 3.5,\n      linkDirectionalArrowRelPos: 1,\n      linkLabel: \"label\" // Show relationship label on hover\n      ,\n      linkWidth: 1,\n      linkColor: () => 'rgba(0,0,0,0.2)' // Make links slightly transparent\n      ,\n\n      onNodeClick: handleNodeClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(KnowledgeGraph, \"7WwoetEZhFyWGOVqpoHUFOeerzQ=\");\n_c = KnowledgeGraph;\nexport default KnowledgeGraph;\nvar _c;\n$RefreshReg$(_c, \"KnowledgeGraph\");","map":{"version":3,"names":["React","useRef","useCallback","useEffect","ForceGraph2D","jsxDEV","_jsxDEV","KnowledgeGraph","graphData","_s","fgRef","current","nodes","length","zoomToFit","handleNodeCanvasObject","node","ctx","globalScale","label","fontSize","font","textWidth","measureText","width","bgDimensions","map","n","fillStyle","fillRect","x","y","textAlign","textBaseline","fillText","handleNodeClick","distance","distRatio","Math","hypot","z","cameraPosition","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","nodeCanvasObject","nodeAutoColorBy","linkDirectionalArrowLength","linkDirectionalArrowRelPos","linkLabel","linkWidth","linkColor","onNodeClick","_c","$RefreshReg$"],"sources":["F:/CTS HACKATHON/pubmed-semantic-search/frontend/src/components/KnowledgeGraph.js"],"sourcesContent":["import React, { useRef, useCallback, useEffect } from 'react';\r\nimport ForceGraph2D from 'react-force-graph-2d';\r\n\r\nconst KnowledgeGraph = ({ graphData }) => {\r\n  const fgRef = useRef();\r\n\r\n  // --- NEW: Auto-center the graph on data load ---\r\n  useEffect(() => {\r\n    // This will trigger whenever new graph data is received\r\n    if (fgRef.current && graphData.nodes.length > 0) {\r\n      // Zoom to fit all nodes in the view, with 100 pixels of padding\r\n      fgRef.current.zoomToFit(400, 100); \r\n    }\r\n  }, [graphData]); // Dependency array ensures this runs when graphData changes\r\n\r\n  // --- UPDATED: Custom node rendering for HIGH CONTRAST labels ---\r\n  const handleNodeCanvasObject = (node, ctx, globalScale) => {\r\n    const label = node.label;\r\n    const fontSize = 12 / globalScale; // Make font size responsive to zoom\r\n    ctx.font = `bold ${fontSize}px Sans-Serif`;\r\n\r\n    // 1. Draw a semi-transparent background for the text\r\n    const textWidth = ctx.measureText(label).width;\r\n    const bgDimensions = [textWidth, fontSize].map(n => n + fontSize * 0.4); // bg padding\r\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.8)'; // White, semi-transparent background\r\n    ctx.fillRect(node.x - bgDimensions[0] / 2, node.y - bgDimensions[1] / 2, ...bgDimensions);\r\n\r\n    // 2. Draw the node label text on top\r\n    ctx.textAlign = 'center';\r\n    ctx.textBaseline = 'middle';\r\n    ctx.fillStyle = '#1f2937'; // Dark text for high contrast on the white background\r\n    ctx.fillText(label, node.x, node.y);\r\n  };\r\n\r\n  const handleNodeClick = useCallback(node => {\r\n    // Aim at the node from outside to zoom in on it\r\n    const distance = 40;\r\n    const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\r\n    \r\n    if (fgRef.current) {\r\n        fgRef.current.cameraPosition(\r\n          { x: node.x * distRatio, y: node.y * distRatio, z: node.z * distRatio },\r\n          node,\r\n          1000 // A quicker 1-second transition\r\n        );\r\n    }\r\n  }, [fgRef]);\r\n\r\n  if (!graphData || !graphData.nodes || graphData.nodes.length === 0) {\r\n    return <div className=\"info-message\">No graph data could be generated for this query.</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"graph-container\">\r\n      <ForceGraph2D\r\n        ref={fgRef}\r\n        graphData={graphData}\r\n        \r\n        // --- Use the new custom rendering function ---\r\n        nodeCanvasObject={handleNodeCanvasObject}\r\n        \r\n        nodeAutoColorBy=\"group\" // Keep color coding by entity type\r\n        linkDirectionalArrowLength={3.5}\r\n        linkDirectionalArrowRelPos={1}\r\n        linkLabel=\"label\" // Show relationship label on hover\r\n        linkWidth={1}\r\n        linkColor={() => 'rgba(0,0,0,0.2)'} // Make links slightly transparent\r\n        \r\n        onNodeClick={handleNodeClick}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default KnowledgeGraph;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}